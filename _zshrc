# vim: ft=sh 

#EDITORにvi, vimを設定すると子プロセスでzshが起動した時にvimのキーバインドになってしまうので、
#明示的にemacsモードを指定
#また、最初にしておかないと、zshrcで各種bindkeyをした後にbindkey -eをしてしまうとリセットされてしまう
bindkey -e

#pathの重複をさせない
typeset -U path PATH

setopt PROMPT_SUBST
setopt TRANSIENT_RPROMPT
setopt no_beep

PATH=~/usr/local/bin:$PATH
PATH=$HOME/dotfiles/bin:$PATH
export PATH

alias ls='ls -GF'
alias la='ls -a'
alias ll='ls -l'
alias vi='vim'
alias be='bundle exec'
alias mktoday='mktodaydir && cd `date "+%Y%m%d"`'

## Default shell configuration
#
# set prompt
#
autoload colors
colors
case ${UID} in
0)
    PROMPT="%B%{${fg[red]}%}%/#%{${reset_color}%}%b "
    PROMPT2="%B%{${fg[red]}%}%_#%{${reset_color}%}%b "
    SPROMPT="%B%{${fg[red]}%}%r is correct? [n,y,a,e]:%{${reset_color}%}%b "
    [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] && 
        PROMPT="%{${fg[cyan]}%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') ${PROMPT}"
    ;;
*)
    PROMPT="%{${fg[red]}%}[%~]%{${reset_color}%}
%% "
    PROMPT2="%{${fg[red]}%}%_%%%{${reset_color}%} "
    SPROMPT="%{${fg[red]}%}%r is correct? [n,y,a,e]:%{${reset_color}%} "
    [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] && 
        PROMPT="%{${fg[cyan]}%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') ${PROMPT}"
    ;;
esac

# set terminal title including current directory
#
case "${TERM}" in
kterm*|xterm*)
    precmd() {
        echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
    }
    export LSCOLORS=exfxcxdxbxegedabagacad
#    export LSCOLORS=gxfxcxdxbxegedabagacad
    export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors \
        'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
    ;;
esac

#C-sを切る
stty -ixon -ixoff

#補完設定
#zsh-completion
if [ -e /usr/local/share/zsh-completions ]; then
    fpath=(/usr/local/share/zsh-completions $fpath)
fi
fpath=($fpath ~/.zsh/completion)

## 補完時に大小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select=1

autoload -U compinit
compinit -u

## history
HISTFILE="$HOME/.zsh_history"
HISTSIZE=30000
SAVEHIST=30000
#重複した履歴は記録しない
setopt hist_ignore_all_dups
#余分な空白は詰める
setopt hist_reduce_blanks
#historyコマンド自体は履歴に入れない
setopt hist_no_store
#historyは共有する
setopt share_history

#git setting
source ~/.zsh/my-git-prompt.zsh
alias g='git'
alias ggraph='git log --graph --all --branches --oneline --decorate=full'
alias gs='git status'

# gitのリポジトリ内にいる時にリポジトリルートにcdする
function git-root() {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    cd `pwd`/`git rev-parse --show-cdup`
  fi
}

autoload -Uz history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

#cd は親ディレクトリからカレントディレクトリを選択しないので表示させないようにする (例: cd ../<TAB>):
zstyle ':completion:*:cd:*' ignore-parents parent pwd

#----- cdr
autoload -Uz is-at-least
if is-at-least 4.3.11
then
  autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
  add-zsh-hook chpwd chpwd_recent_dirs
  zstyle ':chpwd:*' recent-dirs-max 1000
  zstyle ':chpwd:*' recent-dirs-default yes
  zstyle ':completion:*' recent-dirs-insert both
fi

#OS毎の設定をロード
case "${OSTYPE}" in
# Mac(Unix)
darwin*)
    # ここに設定
    [ -f ~/dotfiles/_zshrc.osx ] && source ~/dotfiles/_zshrc.osx
    ;;
    # Linux
linux*)
    # ここに設定
    [ -f ~/dotfiles/_zshrc.linux ] && source ~/dotfiles/_zshrc.linux
    ;;
esac

PERL_MB_OPT="--install_base \"/Users/pocari/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/pocari/perl5"; export PERL_MM_OPT;

#pecoがインストールされている場合コマンド定義
if (( ${+commands[peco]} )); then
  [ -f ~/dotfiles/_zshrc.peco ] && source ~/dotfiles/_zshrc.peco
fi

source ~/.tmuxinator/tmuxinator.zsh


function manvi() {
  /usr/bin/man $* -P "col -b | vim -Rc 'setl ft=man ts=8 nomod nolist nonu' -c 'nmap q :q<cr>' -"
}

#nodeの設定
if (( ${+commands[node]} )); then
  export PATH=$PATH:./node_modules/.bin
fi
