[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

# [[plugins]]
# repo = 'scrooloose/syntastic'
# on_ft = ['ruby', 'go', 'rust']

[[plugins]]
repo = 'neomake/neomake'
on_ft = ['ruby', 'go', 'rust']
hook_source = '''
autocmd! BufWritePost * Neomake
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_post_source = '''
" snippetだと一文字で定義されている場合にデフォルトの「2文字以上で発火」に
" していると無視されるのでneosnippetだけは一文字から反応するようにする
call deoplete#custom#set('neosnippet', 'input_pattern', '.')

" 一文字で発火するようにすると、こんどはデフォルトの matcher_length で
" 補完対象が一文字を超えるモノしか対象にならないので前方一致に変更する
call deoplete#custom#set('neosnippet', 'matchers', ['matcher_head'])
'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
if = 'has("nvim")'
on_ft = 'rust'

[[plugins]]
repo = 'Shougo/neco-vim'
if = 'has("nvim")'
on_ft = 'vim'
on_i = 1

[[plugins]]
repo = 'zchee/deoplete-go'
if = 'has("nvim")'
on_ft = 'go'
on_i = 1
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/deoplete-rct'
if = 'has("nvim")'
on_ft = 'ruby'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_post_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1

  let g:neosnippet#snippets_directory= []
  call add(g:neosnippet#snippets_directory, '~/.vim/snippets/')
'''
on_i  = 1
depends = ['neosnippet-snippets']

# [[plugins]]
# repo = 'slim-template/vim-slim'
# on_ft = 'slim'

# [[plugins]]
# repo = 'osyo-manga/vim-monster'
# on_ft = 'ruby'

# markdownのプレビュー
# http://dackdive.hateblo.jp/entry/2014/09/11/213455
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
depends = ['previm', 'open-browser.vim']

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

# [[plugins]]
# repo = 'mattn/benchvimrc-vim'
# on_cmd = ['BenchVimrc']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

# [[plugins]]
# repo = 'toyamarinyon/vim-swift'
# if   = '''has('mac')'''
# on_ft = 'swift'

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_ft = ['javascript', 'typescript']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'
depends = ['vim-js-indent']

# インストール後初回一回だけ、insertモードにしてdeoplete読み込んでから :UpdateRemotePlugins する必要がある？？
[[plugins]]
repo = 'mhartington/deoplete-typescript'
if = 'has("nvim")'
on_i = 1
on_ft = 'typescript'

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = ['python', 'python3']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_i = 1
on_ft = ['python', 'python3']

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

# [[plugins]]
# repo = 'pocari/slimv'
# rev  = 'fix-tmux-version'
# if   = '''has('mac')'''
# on_ft = ['lisp', 'scheme']

[[plugins]]
repo = 'tpope/vim-endwise'
on_i = 1

[[plugins]]
if = 'has("nvim")'
repo = 'Shougo/unite.vim'
on_source = 'denite.nvim'

# [[plugins]]
# if = 'has("nvim")'
# repo = 'pocari/denite.nvim'
# rev = 'fix-alias-syntax-name'
# on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
# hook_post_source = 'source ~/.vim/rc/plugins/denite.rc.vim'

[[plugins]]
if = 'has("nvim")'
repo = 'Shougo/denite.nvim'
on_cmd = [
  'Denite',
  'DeniteBufferDir',
  'DeniteCursorWord',
  'DeniteProjectDir'
]
hook_post_source = 'source ~/.vim/rc/plugins/denite.rc.vim'

# [[plugins]]
# if = 'has("nvim")'
# repo = 'lambdalisue/denite.nvim'
# on_cmd = 'Denite'
# rev = 'neovim-prompt'
# hook_post_source = 'source ~/.vim/rc/plugins/denite.rc.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_if = 1
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
# brew install --HEAD cmakeするとうまいこといった
# https://github.com/nixprime/cpsm/issues/27#issuecomment-246595722
if = 'has("nvim")'
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'
on_source = ['denite.nvim']

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>(easymotion-'

[[plugins]]
repo = 'Shougo/vimfiler'
on_cmd = 'VimFilerBufferDir'
depends = ['unite.vim']

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'pocari/vim-denite-emoji'
on_source = ['denite.nvim']
depends = ['vim-emoji']

[[plugins]]
repo = 'pocari/vim-denite-gists'
on_source = ['denite.nvim']
depends = ['vim-denite-kind-open-browser']

[[plugins]]
repo = 'pocari/vim-denite-kind-open-browser'
on_source = ['denite.nvim']
depends = ['open-browser.vim']

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['Dockerfile', 'docker-compose']


[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_map = '[gtags]'

[[plugins]]
repo = 'vim-scripts/BufOnly.vim'
on_cmd = ['Bufonly']

[[plugins]]
repo = 'pocari/vim-denite-directory-old'
on_source = ['denite.nvim']

[[plugins]]
repo = 'jvirtanen/vim-octave'
on_ft = ['octave']

[[plugins]]
if = 'has("nvim")'
repo = 'lambdalisue/gina.vim'
on_cmd = [
  'Gina'
]

[[plugins]]
repo = 'git@bitbucket.org:caffepocari/vim-denite-a-ds-list.git'
on_source = ['denite.nvim']
depends = ['vim-denite-kind-open-browser']


