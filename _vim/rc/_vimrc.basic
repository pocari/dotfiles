" vim: fenc=utf-8
"
let mapleader=','
noremap \  ,

:set number

nnoremap ZZ <Nop>
nnoremap ZQ <Nop> 
" Use English interface.
language message C

set wildmenu " コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmode=longest,full
set formatoptions+=mM " テキスト挿入中の自動折り返しを日本語に対応させる
set modeline " モードラインを有効にする
if !has('nvim')
  " neovimの場合、本体側でロードされる
  source $VIMRUNTIME/macros/matchit.vim " ()対応の拡張rubyのdo...endにも対応
endif
set incsearch "インクリメンタルサーチ
set ignorecase "大文字小文字無視
set noswapfile "swapファイルは作らない
set nobackup   "バックアップファイルも作らない
set noundofile  "undoファイルを作らない
set mouse=a
set nowrap "折り返さない
set hidden  "バッファを編集中でも切り替えられるように
set confirm "終了時に未保存バッファがあると確認する
if has('clipboard')
  set clipboard+=unnamed "ヤンクした内容がシステムのクリップボードにも入るようにする
endif
set nrformats=  " Ctr-a, xは常に10進数
set shortmess+=I  "ウガンダ非表示
set cmdheight=1 "コマンド行は1行
" insertモードを抜けるとIMEオフ
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
set noequalalways " ウインドウ分割時に均等に分割しない
set winheight=8 " ウインドウ分割時の最低のheight設定
set winwidth=8 " ウインドウ分割時の最低のwidth設定
set completeopt=menuone "保管時にプレビューウィンドウを表示しない(デフォルトでmenuoneの他にpreviewがついていた)
set nofoldenable " デフォルトはfoldingされてない状態で開く
set noshowmode " echodoc plugin用
set ambiwidth=double

" if has('nvim')
"   set inccommand=nosplit  " %s/aa/bb でincrementalに置換する
" endif
" let g:loaded_gzip              = 1

"対応する括弧でチカチカさせない
" let loaded_matchparen=1
"チカチカさせるけど控えめにする
hi MatchParen term=standout ctermbg=NONE ctermfg=white cterm=BOLD gui=BOLD

" Ctrl-L で検索ハイライトを消す
" multiple_cursorプラグインを入れている場合にnohだけだと選択範囲がクリアされないのでclearmatchesも追加
nmap <C-l> <C-l>:nohlsearch<CR>:call clearmatches()<CR>

"tagsジャンプの時に複数あるときは一覧表示
nnoremap <C-]> g<C-]>

" 一時ファイルを作成して開く
command! Tempfile :edit `=tempname()`

"escは遠い 要Karabiner
imap <C-j> <Esc>
vmap <C-j> <Esc>

" Turn off paste mode when leaving insert
autocmd MyInit InsertLeave * set nopaste

"tab setting
" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}

if has('vim_starting')
  let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
endif

set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    <Leader>t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ

"不可視文字列の設定
if has('vim_starting')
  if !has("win32")
     set list
     set listchars=trail:-,extends:»,precedes:«,nbsp:%
     set listchars+=tab:\|\ 
     highlight SpecialKey ctermfg=59
  endif
endif

" insert mode->normal mode
inoremap <silent> jj <ESC>

" 常にステータスラインを表示
set laststatus=2

" grep設定
" rg -> ag ->  grep の順に優先して使用
if executable('rg')
  set grepprg=rg\ --no-heading\ --vimgrep
  set grepformat=%f:%l:%c:%m
elseif executable('ag')
  set grepprg=ag\ --nogroup\ -iS
  set grepformat=%f:%l:%m
else
  set grepprg=grep\ -Hnd\ skip\ -r
  set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m
endif

"QuickFixでのショートカット
nnoremap <F8> :cprevious<CR>
nnoremap <F9> :cnext<CR>

"grepした後は自動的にQuickFixを開く
":grep hogehoge | cw
"のような
autocmd MyInit QuickFixCmdPost *grep* cwindow

"diffの色設定
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=22
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=52
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17
highlight DiffText   cterm=bold ctermfg=10 ctermbg=21

"コマンドラインモードはemacs的なキーマップに
cnoremap <C-a> <Home>
" 一文字戻る
cnoremap <C-b> <Left>
" カーソルの下の文字を削除
cnoremap <C-d> <Del>
" 行末へ移動
cnoremap <C-e> <End>
" 一文字進む
cnoremap <C-f> <Right>
" コマンドライン履歴を一つ進む
cnoremap <C-n> <Down>
" コマンドライン履歴を一つ戻る
cnoremap <C-p> <Up>
" カーソル位置から行末までを消す
cnoremap <C-k> <C-\>e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]<CR>

if !has('nvim')
  set ttymouse=xterm2
  set ttyscroll=3
  set ttyfast " u got a fast terminal
endif

set lazyredraw " to avoid scrolling problems

" 検索結果のハイライトの色を変える
:hi Search cterm=NONE ctermfg=black ctermbg=yellow
:hi IncSearch cterm=NONE ctermfg=black ctermbg=cyan

" Capture {{{
command!
      \ -nargs=1
      \ -complete=command
      \ Capture
      \ call Capture(<f-args>)

function! Capture(cmd)
  redir => result
  silent execute a:cmd
  redir END

  let bufname = 'Capture: ' . a:cmd
  new
  setlocal bufhidden=unload
  setlocal nobuflisted
  setlocal buftype=nofile
  setlocal noswapfile
  silent file `=bufname`
  silent put =result
  1,2delete _
endfunction
" }}}

" vimを終了してもundo情報保持
if has('persistent_undo')
  let s:persistent_undo_dir = expand('~/.cache/persistent_undo/')
  if !isdirectory(s:persistent_undo_dir)
    call mkdir(s:persistent_undo_dir, 'p')
  endif

  set undodir=~/.cache/persistent_undo
  set undofile
endif


" Neovimでの文字化け対策。これで行けるかどうか様子見
" 合わせて.tmux.confに set -s escape-time0 も追加
"
" 元ネタ
" https://github.com/neovim/neovim/issues/2051
" その後@_tsub_さんに教えてもらった設定
" さらにその後twitterでみつけた
" https://twitter.com/hori_ryota/status/881078941028564993
if has('nvim')
"   set timeout
"   set timeoutlen=300
  set ttimeout
  set ttimeoutlen=100
endif

" リロード用コマンド
command! Reloadrc :source ~/.vimrc

if has('nvim')
  " exitフックを指定して:terminalを開く
  function! s:termopen_wrapper(on_exit) abort
    " https://github.com/neovim/neovim/pull/5529
    " でvimのpartialがneovimに取り込まれて以降は、
    " on_existに設定するコールバックが関数名でなく、
    " 関数値そのもの？(function('関数名'))ようなので、古いneovimの場合注意
    "
    " 7.4.1577が当たっているかどうかで切り分ける
    if has('patch-7.4.1577')
      call termopen($SHELL, {'on_exit': function(a:on_exit)})
    else
      call termopen($SHELL, {'on_exit': a:on_exit})
    endif
  endfunction

  " terminalの終了時にバッファを消すフック
  function! s:onTermExit(job_id, code, event) dict
    " Process Exitが表示されたその後cr打つとバッファが無くなるので
    " それと同じようにする
    call feedkeys("\<CR>")
  endfun

  " 水平分割でexit時に自動でcloseする行数sizeのターミナルバッファ表示
  function! TermHelper(...) abort
    let h_or_v = get(a:, 1, 'h') "デフォルトは水平分割
    let size = get(a:, 2, 15) "デフォルトは高さ(or幅)15のウィンドウ

    if h_or_v == 'h'
      "topleft new | call s:termopen_wrapper('s:onTermExit')
      topleft new | Eterminal
      execute 'resize ' . size
    else
      "vertical botright new | call s:termopen_wrapper('s:onTermExit')
      vertical botright new | Eterminal
      execute 'vertical resize ' . size
    endif
  endfun

  " 水平ウィンドウ分割してターミナル表示 引数はwindowの行数指定(Horizontal terminal)
  command! -count=15 Hterminal :call TermHelper('h', <count>)
  " 垂直ウィンドウ分割してターミナル表示 引数はwindowの行数指定(Vertical terminal)
  command! -count=80 Vterminal :call TermHelper('v', <count>)
  " ウィンドウ分割なしでターミナル表示(Extended Terminal)
  command! Eterminal :call s:termopen_wrapper('s:onTermExit') | startinsert
endif

" 今のpwdがgitのディレクトリなら、そのルートディレクトリにcdする
function! s:CdToGitRoot() abort
  let dir = system('git-root-dir')
  if dir != ""
    execute 'cd ' . dir
  else
    echo 'this directory is not a git repository.'
  endif
endfunction

command! Groot :call s:CdToGitRoot()

" コマンドラインの補完候補をwindowで表示
set wildoptions=pum

if has('vim_starting')
  syntax enable
  filetype plugin indent on
endif
