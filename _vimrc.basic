let mapleader=','
set nocompatible

syntax on
:set number

nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

filetype plugin indent on

set autoindent "改行時に前の行のインデントを継続する
set smartindent "改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set wildmenu " コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmode=longest,full
set formatoptions+=mM " テキスト挿入中の自動折り返しを日本語に対応させる
set modeline " モードラインを有効にする
source $VIMRUNTIME/macros/matchit.vim " ()対応の拡張rubyのdo...endにも対応
set incsearch "インクリメンタルサーチ
set ignorecase "大文字小文字無視
set smartindent "でもちょっと大文字も考慮
set noswapfile "swapファイルは作らない
set nobackup   "バックアップファイルも作らない
set noundofile  "undoファイルを作らない
set ttymouse=xterm2
set mouse=a
set nowrap "折り返さない
set hidden  "バッファを編集中でも切り替えられるように
set confirm "終了時に未保存バッファがあると確認する
set clipboard+=unnamed "ヤンクした内容がシステムのクリップボードにも入るようにする
set nrformats=  " Ctr-a, xは常に10進数
set shortmess+=I  "ウガンダ非表示
set cmdheight=1 "コマンド行は1行
" insertモードを抜けるとIMEオフ
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
inoremap :set iminsert=0

" Ctrl-L で検索ハイライトを消す
nmap <C-l> <C-l>:nohlsearch<CR>

"tagsジャンプの時に複数あるときは一覧表示
nnoremap <C-]> g<C-]>

" 一時ファイルを作成して開く
command! Tempfile :edit `=tempname()`

colorscheme delek 

"python
" docstringは表示しない
autocmd FileType python setlocal completeopt-=preview

"neocompleteと連携させる
autocmd FileType python setlocal omnifunc=jedi#completions

"escは遠い 要Karabiner
imap <C-j> <Esc>

let g:jedi#auto_vim_configuration = 0

if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'

" カレント行ハイライト
set cursorline
" アンダーラインを引く(color terminal)
highlight CursorLine cterm=underline ctermfg=NONE ctermbg=NONE
" アンダーラインを引く(gui)
highlight CursorLine gui=underline guifg=NONE guibg=NONE

" Turn off paste mode when leaving insert
autocmd InsertLeave * set nopaste

" Open junk file."\{\{\{
command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
  let l:junk_dir = $HOME . '/.vim_junk'. strftime('/%Y/%m')
  if !isdirectory(l:junk_dir)
    call mkdir(l:junk_dir, 'p')
  endif

  let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
  if l:filename != ''
    execute 'edit ' . l:filename
  endif
endfunction"\}\}\}

"tab setting
" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ

"不可視文字列の設定
set list
set listchars=trail:-,eol:↲,extends:»,precedes:«,nbsp:%
set listchars+=tab:\|\ 

highlight SpecialKey ctermfg=59

" insert mode->normal mode
inoremap <silent> jj <ESC>
