# vim: ft=sh

# 色はdoracuraからもってきてちょっと変更
# https://draculatheme.com/fzf

#  --color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9 は無し
export FZF_DEFAULT_OPTS='
  --bind=ctrl-a:select-all,ctrl-y:toggle+down -m --reverse --no-sort
  --color=fg+:#f8f8f2,bg+:#44475a,hl+:#bd93f9
  --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4
  --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6
'

#---------------------------------------------------------------------------------
# コマンド履歴をpecoで検索して表示
function fuzzy-finder-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | eval $tac | awk '!a[$0]++' | fzf --prompt "last command> " --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N fuzzy-finder-select-history
bindkey '^r' fuzzy-finder-select-history

#---------------------------------------------------------------------------------
# cd履歴をpecoで検索して表示
function fuzzy-finder-go-to-dir () {
  local line
  local selected="$(
    {
      (
        autoload -Uz chpwd_recent_filehandler
        chpwd_recent_filehandler && for line in $reply; do
          if [[ -d "$line" ]]; then
            echo "$line"
          fi
        done
      )
      ghq list --full-path
      for line in *(-/) ${^cdpath}/*(N-/); do echo "$line"; done 2>/dev/null | sort -u
    } | fzf --prompt "cd history> " --query "$LBUFFER"
  )"
  if [ -n "$selected" ]; then
    BUFFER="cd ${(q)selected}"
    zle accept-line
  fi
  #zle clear-screen
}
zle -N fuzzy-finder-go-to-dir
bindkey '^[g' fuzzy-finder-go-to-dir


#---------------------------------------------------------------------------------
# pecoで選んだプロセスをキルする
function kill-fzf () {
    ps aux | fzf --prompt "KILL > " | awk '{ print $2 }' | xargs kill -9
}

#---------------------------------------------------------------------------------
# pecoで選んだものをgit add
function fuzzy-finder-select-gitadd() {
    local SELECTED_FILE_TO_ADD="$(git status --porcelain | \
                                  fzf --prompt "git add> " --query "$LBUFFER" | \
                                  awk -v path=$(git rev-parse --show-toplevel)/ -F ' ' '{print path $NF}')"
    if [ -n "$SELECTED_FILE_TO_ADD" ]; then
      BUFFER="git add $(echo "$SELECTED_FILE_TO_ADD" | awk -F\n -v ORS=' ' '{print "\"" $0 "\""}' | tr '\n' ' ')"
      CURSOR=$#BUFFER
    fi
    zle accept-line
    # zle clear-screen
}
zle -N fuzzy-finder-select-gitadd
bindkey "^g^a" fuzzy-finder-select-gitadd

#---------------------------------------------------------------------------------
# pecoでブランチを選択してチェックアウト
function fuzzy-finder-git-checkout() {
  local selected_branch="$(
    git for-each-ref \
      --sort=-committerdate refs/heads/ \
      --format='%(HEAD) %(refname:short) - %(objectname:short) - %(contents:subject) - %(authorname) - (%(committerdate:relative))' \
    | fzf --prompt "git branches> " \
    | sed -e "s/\* //g" \
    | awk "{print \$1}"
  )"
  if [ -n "$selected_branch" ]; then
    git checkout $selected_branch
  fi
  zle accept-line
}
zle -N fuzzy-finder-git-checkout
bindkey "^g^b" fuzzy-finder-git-checkout

#---------------------------------------------------------------------------------
# pecoでgit statusの結果を挿入
function fuzzy-finder-select-from-git-status(){
    git status --short | \
    fzf --prompt "git status> " | \
    awk -F ' ' '{print $NF}'
}

function fuzzy-finder-insert-selected-git-files(){
    LBUFFER+=$(fuzzy-finder-select-from-git-status | awk -F\n -v ORS=' ' '{print "\"" $0 "\""}')
    CURSOR=$#LBUFFER
    zle reset-prompt
}

zle -N fuzzy-finder-insert-selected-git-files
bindkey "^g^s" fuzzy-finder-insert-selected-git-files

#---------------------------------------------------------------------------------
# pecoでショートカットコマンドの結果を挿入
function fuzzy-finder-select-shortcut(){
    LBUFFER+=$( \
      cat ~/dotfiles/pecommand.txt | \
      grep -v -e '^\s*#' -e '^$' | \
      fzf --prompt "commands > " | \
      sed -e 's/#.*$//' \
    )
    CURSOR=$#LBUFFER
    zle reset-prompt
}

zle -N fuzzy-finder-select-shortcut
bindkey '^s' fuzzy-finder-select-shortcut

#---------------------------------------------------------------------------------
# pecoでカレントディレクトリ以下のファイルをリスティング
function fuzzy-finder-list-files() {
  local selected_buffer=$(list-files | fzf --prompt 'files> ')
  if [ -n "$selected_buffer" ]; then
    if [ -t 1 ]; then
      # 画面から叩かれているときはコマンドラインにvimの引数として表示
      local files=$(echo $selected_buffer | awk -F\n -v ORS=' ' '{print "\"" $0 "\""}')
      print -z "vim ${files}"
    else
      # pipeでつながれているときは普通に出力
      print $selected_buffer
    fi
  fi
}

alias ff='fuzzy-finder-list-files'

#---------------------------------------------------------------------------------
# pecoでdocker exec -it container
function fuzzy-finder-docker-exec() {
  local exec_command=$1
  local selected_container=$( \
    docker ps --no-trunc --format 'table {{.ID | printf "%.10s"}}\t{{.Names}}\t{{.Command}}\t{{.RunningFor}}' | sed 1d | fzf --prompt 'container > ' | awk '{print $1}' \
  )
  if [ -n "$selected_container" ]; then
    docker exec -e COLUMNS="`tput cols`" -e LINES="`tput lines`" -it ${selected_container} ${exec_command:-bash}
  fi
}

alias pecontainer='fuzzy-finder-docker-exec'
alias pc='pecontainer'

#---------------------------------------------------------------------------------
# pecoでexitしてるコンテナを削除
function fuzzy-finder-docker-rm-exited-container() {
  local selected_buffer=$(docker ps -a --format "{{.Names}}\t{{.Command}}\t{{.Status}}" | fzf --prompt 'container> ')
  if [ -n "$selected_buffer" ]; then
    local containers=$(echo $selected_buffer | awk -F"\t" '{print $1}')
    docker rm $(echo ${containers} | tr '\n' ' ')
  fi
}

alias pecontainer-rm='fuzzy-finder-docker-rm-exited-container'
#---------------------------------------------------------------------------------
# pecoでコã³テナkill
function fuzzy-finder-docker-kill-exited-container() {
  local selected_buffer=$(docker ps -a --format "{{.Names}}\t{{.Command}}\t{{.Status}}" | peco --prompt 'container>')
  if [ -n "$selected_buffer" ]; then
    local containers=$(echo $selected_buffer | awk -F"\t" '{print $1}')
    docker kill $(echo ${containers} | tr '\n' ' ')
  fi
}

alias pecontainer-kill='fuzzy-finder-docker-kill-exited-container'

#---------------------------------------------------------------------------------
# pecoでいまopenされているprのブランチをチェックアウトする
function fuzzy-finder-checkout-github-pr() {
  local selected_buffer=$(gh pr list -L 50 --json title,number,headRefName | jq -r '.[] | [.title, .headRefName, .number | tostring ] | join("\t:")' | fzf --prompt 'pull requests> ' --preview "fuzzy-finder-git-checkout-pr-branch-preview {}")
  if [ -n "$selected_buffer" ]; then
    local pr_no=$(echo $selected_buffer | awk -F":" '{print $NF}')
    hub pr checkout $pr_no
  fi
}
alias ghpr='fuzzy-finder-checkout-github-pr'

#---------------------------------------------------------------------------------
# pecoでaws-vaultに登録されているprofileのaws consoleを開く
function fuzzy-finder-open-aws-vault-profile-console() {
  local selected_buffer=$(aws-vault ls | grep -v '^default' | sed '1,2d' | fzf --prompt 'select profile> ' )
  if [ -n "$selected_buffer" ]; then
    local profile=$(echo $selected_buffer | awk '{print $1}')
    aws-vault login $profile
  fi
}
alias awsc='fuzzy-finder-open-aws-vault-profile-console'

#---------------------------------------------------------------------------------
# pecoで既存のtmuxのsessionにattachする
function fuzzy-finder-attach-tumx-session() {
  # 複数行選んでも意味ないので、pecoのあとにheadで先頭1行だけ取得
  local selected_buffer=$(tmux list-session  | fzf --prompt 'select tmux session> ' | head -n 1 )
  if [ -n "$selected_buffer" ]; then
    local tmux_session_id=$(echo $selected_buffer | awk -F: '{print $1}')
    tmux attach -t${tmux_session_id}
  fi
}

alias pta='fuzzy-finder-attach-tumx-session'

