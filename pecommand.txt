# vim: ft=sh

\ls -F | grep '/$' | xargs -Iarg du -sh arg   # カレントディレクトリのフォルダ単位でdu -shする dir size folder
git log master..HEAD # masterから派生した今のブランチに対してcommitしたログのみ出力する
git branch -d $(git branch --merged | grep -v master | grep -v '*') #マージ済みのローカルブランチを削除ただしmasterは除く delete branch merge
docker rmi $(docker images -f dangling=true -q) # 不要なイメージを消す image delete remove
for i in $(seq 1 10); do time zsh -i -c exit; done # zshの起動時間計る zsh bench
socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" # dockerからGUIを受ける口をmac側で開く
vi -c 'call DeinCheckAndInstall()' # deinで未インストールプラグインを一括ダウンロード dein plugin install check
rm ~/.zcompdump && compinit -i # zshの補完リセット zsh reset
git log --pretty=format:"%h %an %ad %s" --date=format:"%Y-%m-%d %H:%M:%S" | grep $(date -v-1d +"%Y-%m-%d") # 昨日のcommit一覧を表示(-v-1d)の部分を変えると任意の日付 commit check
open 'http://localhost:1234' ; ruby -run -e httpd -- --bind-address=0.0.0.0 --port=1234 . # カレントディレクトリをDocumentRoot,  port:1234にして簡易webサーバ起動
lsof -i -P | grep 1080 # port 1080をlistenしているprocess（があれば)表示する
screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty # docker for macのvmに入る。 Ctr-a, dで抜けられる
sudo pfctl -F all -f /etc/pf.conf # pfctlでメモリ上に設定しているものリセットして、 /etc/pf.conf の設定内容のみにする
aws ec2 describe-instances | jq -r '.Reservations[].Instances[] | (.Tags[] | select(.Key == "Name") | .Value) + "@" + (.NetworkInterfaces[] | select(.Status == "in-use") | .Association.PublicIp // "-") + "@" + (.NetworkInterfaces[] | select(.Status == "in-use") | .PrivateIpAddress) + "@" + ( .Tags | sort | map(select(.Key == "product" or .Key == "RailsEnv")) | map("\(.Key):\(.Value)") | join(", ") )'  | column -t -s "@" | sort # elastic beanstalkから作成したEC2のpublic ip一覧を表示する
sudo sysctl debug.lowpri_throttle_enabled=0 # 0: 速くなる, 1: 通常 timemachineの優先度変更
ssh -L 1234:host2:5678 ssh接続先 # ローカルのポート1234をhost2のポート5678に繋ぐ
git merge --no-commit --no-ff [マージしたいブランチ名] # 今いるブランチに[マージしたいブランチ名]をmergeした結果をステージングした状態時する。この後コミットせずに git reset --hard HEAD すればもとに戻せる
mysqldump -h 127.0.0.1 -P 13306 -uUSER -p DATABASE_NAME TABLE_NAME --where "k = 'v'" # 特定のテーブルからwhere 区指定してdump
curl inet-ip.info # global ip 確認
aws s3 cp s3://bucket名/対象ディレクトリのパス . --recursive # s3からディレクトリをダウンロード
echo 'eval $(assume-role sikmi_google_profile)' > .envrc; direnv allow # sikmiのsamlの認証情報をdirenv用に展開するためのおenvrcを作成する.saml2aws login -a sikmi_google_idp やっとく
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222 --no-first-run --no-default-browser-check --user-data-dir=$(mktemp -d -t 'chrome-remote_data_dir') # remote debug mode chrome を独立して開く
sikmi_vpn_con #sikmiのVPNに接続する
sikmi_vpn_dis #sikmiのVPNからの接続終了
ruby -pe '$_.gsub!(/\n/, "\\n")' # 生の改行を文字列としての\nに変換する 改行を含むデータをjsonのvalueにするときなど
aws ec2 describe-nat-gateways | jq -r '.NatGateways[] | ((.Tags[] | select(.Key == "Name").Value) + " : " + .NatGatewayAddresses[].PublicIp)' | sort # nat gatewayのelastic ip(public ip)一覧をNameタグの値と一緒に表示
aws ec2 describe-subnets | jq -r '.Subnets[] | ((select(.Tags != null) | .Tags[] | select(.Key == "Name").Value) + " : " + .CidrBlock)' | sort # NameタグのついているsubnetのcidrとNameを一緒に表示
