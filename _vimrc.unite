" TODO UniteとDeniteの設定が入り混じってるので整理する


"The prefix key.
nnoremap    [unite]   <Nop>
nmap    <Leader>f [unite]

if has('nvim')
  " denite bufferの現在行の色
  hi CursorLine ctermfg=magenta
  "let g:neomru#directory_mru_limit = 10000
  "let g:neomru#file_mru_limit = 20000
  call denite#custom#source('file_mru', 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])
  call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])

  if executable('files') && has('nvim')
    " https://github.com/mattn/files
    call denite#custom#var('file_rec', 'command', ['files', '-a'])
  endif
  nnoremap [unite]m :<C-u>Denite<Space>file_mru<CR>
  nnoremap [unite]b :<C-u>Denite<Space>buffer<CR>
  nnoremap [unite]a :<C-u>Denite<Space>buffer file_mru unite:file<CR>
  nnoremap [unite]y :<C-u>Denite<Space>neoyank<CR>

  " deniteだと速いので素直に全部持ってくる
  nnoremap [unite]p :<C-u>Denite<Space>file_rec<CR>
  " -buffer-name=
  nnoremap <silent> [unite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>

  " grep検索結果の再呼出
  nnoremap <silent> [unite]r  :<C-u>Denite -resume=true -buffer-name=search-buffer-denite<CR>
else
  nnoremap [unite]m :<C-u>Unite<Space>file_mru<CR>
  nnoremap [unite]b :<C-u>Unite<Space>buffer<CR>
  nnoremap [unite]a :<C-u>Unite<Space>buffer file_mru file<CR>
  " 今のプロジェクトのファイル一覧
  " ctrlpよりこっちのがいい？迷う
  nnoremap [unite]p :<C-u>call <SID>unite_file_project('-start-insert')<CR>

  " grep検索
  nnoremap <silent> [unite]g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>

  " grep検索結果の再呼出
  nnoremap <silent> [unite]r  :<C-u>UniteResume search-buffer<CR>
endif



" ウィンドウを分割して開く
" C-Sにマップしてるので、端末の場合stty -ixonしてないと効かないので注意
au FileType unite nnoremap <silent> <buffer> <expr> <C-S> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-S> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-V> unite#do_action('right')
au FileType unite inoremap <silent> <buffer> <expr> <C-V> unite#do_action('right')

"入力モードで開始
let g:unite_enable_start_insert=1

" file_mrcの対象を現在のプロジェクトのファイルのみにする
" (matcher_project_files)
" 先頭に^が来た時だけ正規表現でマッチさせる。それ以外はglob検索
" (matcher_context)
call unite#custom#source(
      \ 'file_mru', 'matchers',
      \ ['matcher_project_files', 'matcher_context'])

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  if has('nvim')
    "call denite#custom#var('grep', 'command', ['ag'])
    "call denite#custom#var('grep', 'recursive_opts', [])
    "call denite#custom#var('grep', 'final_opts', [])
    "call denite#custom#var('grep', 'separator', [])
    "call denite#custom#var('grep', 'default_opts',
    "      \ ['--nocolor', '--nogroup', '--column'])
  else
    let g:unite_source_grep_command='ag'
    let g:unite_source_grep_default_opts='--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt=''
  endif
endif

if executable('rg')
  if has('nvim')
    " Ripgrep command on grep source
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
  else
    let g:unite_source_grep_command='rg'
    let g:unite_source_grep_default_opts='--vimgrep --no-heading'
    let g:unite_source_grep_recursive_opt=''
    let g:unite_source_grep_separator='--'
  endif
endif

" 画像ファイルを無視する
let s:unite_ignore_patterns='\.\(gif\|jpe\?g\|png\|webp\)$'
call unite#custom#source('file_rec/async', 'ignore_pattern', s:unite_ignore_patterns)
call unite#custom#source('file_rec/git', 'ignore_pattern', s:unite_ignore_patterns)

function! GetProjectDir() abort " {{{
    if exists('b:vimfiler.current_dir')
        let l:buffer_dir = b:vimfiler.current_dir
    else
        let l:buffer_dir = expand('%:p:h')
    endif

    let l:project_dir = vital#of('vital').import('Prelude').path2project_directory(l:buffer_dir, 1)
    if empty(l:project_dir) && exists('g:project_dir_pattern')
        let l:project_dir = matchstr(l:buffer_dir, g:project_dir_pattern)
    endif

    if empty(l:project_dir)
        return l:buffer_dir
    else
        return l:project_dir
    endif
endfunction " }}}

function! s:unite_file_project(...)
    let l:opts = (a:0 ? join(a:000, ' ') : '')
    let l:project_dir = GetProjectDir()

    if isdirectory(l:project_dir.'/.git')
        execute 'lcd '.l:project_dir
        execute 'Unite '.opts.' file_rec/git:--cached:--others:--exclude-standard'
    else
        execute 'Unite '.opts.' file_rec/async:'.l:project_dir
    endif
endfunction


" Deniteのデフォルトマッピングが変わってしまったので元に戻す
" https://github.com/Shougo/denite.nvim/commit/cf9a400ce3b1918b4b6570fb97416c5c016976a9
if has('nvim')
  call denite#custom#map('insert', "\<C-g>", 'quit')
  call denite#custom#map('normal', "\<C-g>", 'quit')

  call denite#custom#map('insert', "\<C-n>", 'move_to_next_line')
  call denite#custom#map('insert', "\<Down>", 'move_to_next_line')

  call denite#custom#map('insert', "\<C-p>", 'move_to_prev_line')
  call denite#custom#map('insert', "\<Up>", 'move_to_prev_line')
endif

